/**
 * Syst√®me de gestion des sons pour les animations
 * Les sons sont d√©sactivables via les param√®tres utilisateur
 */

import { getUserSettings } from './user-settings'
import { syntheticSoundGenerator } from './sound-fallback'

export type SoundType = 'success' | 'badge' | 'delete' | 'flip'

class SoundManager {
  private sounds: Map<SoundType, HTMLAudioElement> = new Map()
  private initialized = false
  private useFallback = false

  /**
   * Initialise les sons (appel√© une seule fois)
   */
  private async init() {
    if (this.initialized || typeof window === 'undefined') return

    try {
      // Pr√©charger les sons MP3
      const soundFiles: [SoundType, string][] = [
        ['success', '/sounds/success.mp3'],
        ['badge', '/sounds/badge.mp3'],
        ['delete', '/sounds/delete.mp3'],
        ['flip', '/sounds/flip.mp3']
      ]

      // V√©rifier si au moins un fichier existe
      const testAudio = new Audio('/sounds/success.mp3')
      testAudio.volume = 0

      await new Promise<void>((resolve, reject) => {
        testAudio.addEventListener('canplaythrough', () => {
          console.log('[SOUNDS] ‚úÖ Fichiers MP3 disponibles')
          this.useFallback = false
          resolve()
        }, { once: true })

        testAudio.addEventListener('error', () => {
          console.log('[SOUNDS] ‚ö†Ô∏è Fichiers MP3 introuvables, utilisation des sons synth√©tiques')
          this.useFallback = true
          resolve()
        }, { once: true })

        // Timeout de 2s
        setTimeout(() => {
          console.log('[SOUNDS] ‚ö†Ô∏è Timeout, utilisation des sons synth√©tiques')
          this.useFallback = true
          resolve()
        }, 2000)
      })

      // Si pas de fallback, charger les MP3
      if (!this.useFallback) {
        soundFiles.forEach(([type, path]) => {
          const audio = new Audio(path)
          audio.volume = 0.5
          audio.preload = 'auto'
          this.sounds.set(type, audio)
        })
      }

      this.initialized = true
      console.log('[SOUNDS] ‚úÖ Syst√®me de sons initialis√©')
    } catch (error) {
      console.error('[SOUNDS] ‚ùå Erreur lors de l\'initialisation:', error)
      this.useFallback = true
    }
  }

  /**
   * Joue un son selon le type
   */
  async play(type: SoundType) {
    // V√©rifier les pr√©f√©rences utilisateur
    const settings = getUserSettings()
    if (!settings.soundEnabled) {
      console.log(`[SOUNDS] üîá Son "${type}" d√©sactiv√© par l'utilisateur`)
      return
    }

    // Initialiser si n√©cessaire
    if (!this.initialized) {
      await this.init()
    }

    // Utiliser les sons synth√©tiques si fallback
    if (this.useFallback) {
      console.log(`[SOUNDS] üéµ Son synth√©tique "${type}"`)
      syntheticSoundGenerator.play(type)
      return
    }

    // Sinon utiliser les MP3
    const sound = this.sounds.get(type)
    if (!sound) {
      console.warn(`[SOUNDS] ‚ö†Ô∏è Son "${type}" introuvable`)
      return
    }

    try {
      // R√©initialiser le son pour pouvoir le rejouer
      sound.currentTime = 0
      sound.play().catch(err => {
        // Erreur silencieuse (normal si l'utilisateur n'a pas interagi avec la page)
        console.debug(`[SOUNDS] Son "${type}" bloqu√© par le navigateur:`, err)
      })
    } catch (error) {
      console.error(`[SOUNDS] ‚ùå Erreur lors de la lecture de "${type}":`, error)
    }
  }

  /**
   * Arr√™te tous les sons en cours
   */
  stopAll() {
    this.sounds.forEach(sound => {
      sound.pause()
      sound.currentTime = 0
    })
  }
}

// Export singleton
export const soundManager = new SoundManager()
